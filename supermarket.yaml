AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Native Supermarket (auto-recovering standalone) v4.0.0-alpha1

Parameters:
  # Required Parameters
  AutomationBucket:
    Default: 'sce-pub'
    Type: String
    Description: AWS S3 bucket name that contains all of the cloudformation templates and scripts for this stack
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
  LoadBalancerSubnets:
    Description: Provide a list of Subnet IDs for the Chef Servers (must be at least 2 within the specified VPC)
    Type: List<AWS::EC2::Subnet::Id>
  SupermarketSubnet:
    Description: Provide a single Subnet ID for the Supermarket Server (must be within the specified VPC)
    Type: AWS::EC2::Subnet::Id
  SSLCertificateARN:
    Default: 'arn:aws:iam::'
    Description: SSL Certficate ARN for SSL Certficate
    Type: String
  InboundAdminSecurityGroupId:
    Description: Select an existing Security Group in your VPC to define administrative ACLs (SSH, monitoring tools, etc) to the Chef servers
    Type: AWS::EC2::SecurityGroup::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  ContactEmail:
    Description: Contact email for Cloudwatch notifications and instance tagging
    Type: String
  ContactDept:
    Description: Contact department for billing purposes
    Type: String
  ChefUrl:
    Description: The URL of the Chef Server, required for OAuth2.
    Type: String
  ChefOAuth2AppId:
    Description: The Chef OAuth2 App ID - Get this from the /etc/opscode/oc-id-applications/supermarket.json file on your chef server
    Type: String
  ChefOAuth2Secret:
    Description: The Chef OAuth2 App ID - Get this from the /etc/opscode/oc-id-applications/supermarket.json file on your chef server
    Type: String
  ChefOAuth2VerifySSL:
    Description: If the SSL certificate of your chef server is generated by a globally trusted CA, set this to true.
    Type: String
    Default: false
    AllowedValues:
    - 'true'
    - 'false'
  ###############################################################################
  # Performance Settings
  InstanceType:
    Description: EC2 Instance type for Chef Server Frontends (M5 class recommended)
    Default: m5.large
    Type: String
    AllowedValues: [t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, m4.16xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.12xlarge, m5.24xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge]
  DataVolumeSize:
    Description: Amount of storage space to allocate on the OS disk
    Type: Number
    Default: 100
  ###############################################################################
  # Package Versions & Locations
  SupermarketPackage:
    Description: The URL to the chef server EL7 (chef-server-core) package which will be downloaded
    Type: String
    Default: 'https://packages.chef.io/files/stable/supermarket/3.1.63/el/7/supermarket-3.1.63-1.el7.x86_64.rpm'
  BeforeScriptLocation:
    Description: The S3 location of the script which runs before the Main script (optional)
    Type: String
    Default: ''
  AfterScriptLocation:
    Description: The S3 location of the script which runs after the Main script (optional)
    Type: String
    Default: ''
  ###############################################################################
  # Security Settings
  LoadBalancerScheme:
    Description: Network Scheme for the ELB
    Type: String
    Default: internet-facing
    AllowedValues:
    - 'internet-facing'
    - 'internal'
  LoadBalancerSecurityGroupId:
    Description: Supply a security group for your load balancer (leave blank to have it created for you). Using the default security group is recommended.
    Type: String
    Default: ''
  FrontendSecurityGroupId:
    Description: Supply a security group for your chef frontends (leave blank to have it created for you). Using the default security group is recommended.
    Type: String
    Default: ''
  SupermarketIamRole:
    Description: Supply an IAM Role for the Chef Servers (leave blank to have it created for you). NOTE If you supply your own role, you must also provide an S3 Bucket which that role can access
    Type: String
    Default: ''
  ###############################################################################
  # Other Settings
  Route53HostedZone:
    Type: String
    Default: ''
    Description: Supply a Route 53 Hosted Zone name (eg. mydomain.com.) for auto-creating a DNS record. Must end in a dot. (Leave blank to disable)
  Route53RecordName:
    Type: String
    Default: 'supermarket'
    Description: Supply a DNS record name that will be prepended to the Route 53 Hosted Zone
  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain cloudwatch log events.
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required Parameters"
        Parameters:
          - VPC
          - LoadBalancerSubnets
          - SSLCertificateARN
          - InboundAdminSecurityGroupId
          - KeyName
          - ContactEmail
          - ContactDept
      - Label:
          default: "Performance Settings"
        Parameters:
          - InstanceType
          - MaxFrontendInstances
          - MinFrontendInstances
          - LicenseCount
          - DBInstanceClass
          - DBAllocatedStorage
          - DBIops
          - ElasticSearchInstanceType
          - ElasticSearchVersion
          - ElasticSearchShardCount
          - ElasticSearchReplicaCount
      - Label:
          default: "Package Versions & Locations"
        Parameters:
          - SupermarketPackage
      - Label:
          default: "Security Settings"
        Parameters:
          - LoadBalancerScheme
          - LoadBalancerSecurityGroupId
          - FrontendSecurityGroupId
          - DisableSignup
          - SupermarketIamRole

Conditions:
  CreateSupermarketIamRole:
    !Equals [ !Ref SupermarketIamRole, '' ]
  CreateLoadBalancerSecurityGroup:
    !Equals [ !Ref LoadBalancerSecurityGroupId, '' ]
  CreateFrontendSecurityGroup:
    !Equals [ !Ref FrontendSecurityGroupId, '' ]
  CreateRoute53Record:
    !Not [!Equals [ !Ref Route53HostedZone, '' ] ]

# NOTE: If you wish to replace this AMI with your own RHEL-ish variety, be prepared to
# - have the `aws` & `cfn-init` tools preinstalled
# - Install and enable NTP or chronyd
# - Support systemd as the init system, or else rewrite the below aws-signing-proxy service defitinion into systemd
Mappings:
  AWSRegion2AMI:
    ap-south-1:
      AMI: ami-7d95b612
    eu-west-3:
      AMI: ami-a88233d5
    eu-west-2:
      AMI: ami-924aa8f5
    eu-west-1:
      AMI: ami-921423eb
    ap-northeast-2:
      AMI: ami-d117bebf
    ap-northeast-1:
      AMI: ami-2724cf58
    sa-east-1:
      AMI: ami-4fd48923
    ca-central-1:
      AMI: ami-c59818a1
    ap-southeast-1:
      AMI: ami-a7f0c4db
    ap-southeast-2:
      AMI: ami-c267b0a0
    eu-central-1:
      AMI: ami-43eec3a8
    us-east-1:
      AMI: ami-afd15ed0
    us-east-2:
      AMI: ami-2a0f324f
    us-west-1:
      AMI: ami-00d8c660
    us-west-2:
      AMI: ami-31394949

Resources:
  ChefInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !If [CreateSupermarketIamRole, !Ref ChefRole, !Ref SupermarketIamRole]

  ChefRole:
    Condition: CreateSupermarketIamRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /

  RolePolicies:
    Condition: CreateSupermarketIamRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-Supermarket-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        # Allow instance to create a nightly snapshot
        - Action: ["ec2:CreateSnapshot", "ec2:CreateTags", "ec2:DeleteSnapshot", "ec2:DescribeSnapshots", "ec2:DescribeVolumes"]
          Effect: Allow
          Resource: "*"
        # Allow instances to read their own tags (needed for setup script below)
        - Action: ec2:DescribeTags
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:GetMetricStatistics
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:ListMetrics
          Effect: Allow
          Resource: "*"
        # Allow instances to write to cloudwatch logs
        - Action: ["logs:PutLogEvents", "logs:CreateLogStream", "logs:CreateLogGroup"]
          Effect: Allow
          Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*
      Roles:
      - !Ref ChefRole

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateFrontendSecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: '80'
      - FromPort: '443'
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: '443'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-FE-SG
      VpcId: !Ref VPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateLoadBalancerSecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend Load Balancer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ELB-SG
      VpcId: !Ref VPC

  ChefALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub ${AWS::StackName}-lb
      SecurityGroups:
        - !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
      Subnets: !Ref LoadBalancerSubnets
      # IpAddressType: dualstack
      Scheme: !Ref LoadBalancerScheme
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb
        - Key: X-Dept
          Value: !Ref ContactDept
        - Key: X-Contact
          Value: !Ref ContactEmail

  ChefALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        Certificates:
          - CertificateArn: !Ref SSLCertificateARN
        LoadBalancerArn: !Ref ChefALB
        Port: 443
        Protocol: HTTPS
        DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ChefTargetGroup

  ChefTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        HealthCheckIntervalSeconds: 60
        UnhealthyThresholdCount: 10
        HealthCheckPath: /
        VpcId: !Ref VPC
        Port: 443
        Protocol: HTTPS
        Targets:
        - Id: !Ref SupermarketServer
          Port: 443
        TargetGroupAttributes:
          - Key: stickiness.enabled
            Value: true
          - Key: stickiness.type
            Value: lb_cookie
        Tags:
          - Key: X-Dept
            Value: !Ref ContactDept
          - Key: X-Contact
            Value: !Ref ContactEmail

  SupermarketServer:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: !Ref DataVolumeSize
          VolumeType: gp2
          DeleteOnTermination: true
      IamInstanceProfile: !Ref ChefInstanceProfile
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref AWS::Region
        - AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Monitoring: true
      SubnetId: !Ref SupermarketSubnet
      SecurityGroupIds:
      - !If [CreateFrontendSecurityGroup, !Ref FrontendSecurityGroup, !Ref FrontendSecurityGroupId]
      - !Ref InboundAdminSecurityGroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-singleton
      - Key: X-Dept
        Value: !Ref ContactDept
      - Key: X-Contact
        Value: !Ref ContactEmail
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          trap '/opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack ${AWS::StackName} --resource SupermarketServer' ERR
          # Update the system first
          yum upgrade -y
          # Execute AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SupermarketServer --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource SupermarketServer
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: [awslogs, supermarket_setup, nightly_snapshots]
        supermarket_setup:
          packages:
            rpm:
              supermarket: !Sub ${SupermarketPackage}
            yum:
              perl: []
              perl-Switch: []
              perl-DateTime: []
              perl-Sys-Syslog: []
              perl-LWP-Protocol-https: []
              perl-Digest-SHA: []
              zip: []
              unzip: []
          files:
            /etc/supermarket/supermarket.json:
              content: !Sub
              - |
                {
                  "fqdn": "${FQDN}",
                  "chef_server_url": "${ChefUrl}",
                  "chef_oauth2_app_id": "${ChefOAuth2AppId}",
                  "chef_oauth2_secret": "${ChefOAuth2Secret}",
                  "chef_oauth2_verify_ssl": ${ChefOAuth2VerifySSL},
                  "features": "tools, gravatar, collaborator_groups"
                }
              - { FQDN: !If [CreateRoute53Record, !Ref SupermarketDNSRecord, !GetAtt ChefALB.DNSName] }
          commands:
            02_before_script:
              command: !Sub |
                true
            03_configure_supermarket:
              command: !Sub |
                supermarket-ctl reconfigure
            04_after_script:
              command: !Sub |
                true
            05_configure_cloudwatch_monitoring:
              command: !Sub |
                mkdir /opt/cloudwatch_monitoring
                cd /opt/cloudwatch_monitoring
                curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O
                unzip CloudWatchMonitoringScripts-1.2.1.zip
                rm CloudWatchMonitoringScripts-1.2.1.zip
                crontab -l | { cat; echo "*/5 * * * * /opt/cloudwatch_monitoring/aws-scripts-mon/mon-put-instance-data.pl --auto-scaling --mem-util --disk-space-util --disk-path=/ --from-cron"; } | crontab -
        nightly_snapshots:
          files:
            /usr/local/bin/ebs-snapshot.sh:
              source: https://raw.githubusercontent.com/CaseyLabs/aws-ec2-ebs-automatic-snapshot-bash/master/ebs-snapshot.sh
              mode: '000755'
          commands:
            create_nightly_backup_cronjob:
              command: !Sub |
                crontab -l | { cat; echo "55 23 * * * root /usr/local/bin/ebs-snapshot.sh"; } | crontab -
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}
                log_group_name = ${VarLogMessages}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}
                log_group_name = ${VarLogSecure}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCron}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCloudInitLog}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCfnInitLog}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCfnInitCmdLog}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCloudInitOutputLog}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}
                log_group_name = ${VarLogDmesg}
              mode: '000644'
              owner: root
              group: root
          commands:
            01_systemd:
              command: systemctl daemon-reload && systemctl start awslogsd.service

# EC2 System AutoRecovery
# https://aws.amazon.com/blogs/aws/new-auto-recovery-for-amazon-ec2/
#########################################################################################
  RecoveryAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub EC2AutoRecoveryAlarm-${AWS::StackName}
      AlarmDescription: 'Recovering instance when underlying hardware fails.'
      Namespace: 'AWS/EC2'
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub 'arn:aws:automate:${AWS::Region}:ec2:recover'
      - !Ref AlertNotificationTopic
      Dimensions:
      - Name: InstanceId
        Value: !Ref SupermarketServer

  RebootAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub EC2AutoRebootAlarm-${AWS::StackName}
      AlarmDescription: 'Reboot instance if it starts failing instance checks'
      Namespace: 'AWS/EC2'
      MetricName: StatusCheckFailed_Instance
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 2
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub 'arn:aws:swf:${AWS::Region}:${AWS::AccountId}:action/actions/AWS_EC2.InstanceId.Reboot/1.0'
      - !Ref AlertNotificationTopic
      Dimensions:
      - Name: InstanceId
        Value: !Ref SupermarketServer

# Route 53 Record
#########################################################################################
  SupermarketDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      HostedZoneName: !Ref Route53HostedZone
      Comment: !Sub Created by Cloudformation ${AWS::StackName}
      Name: !Sub ${Route53RecordName}.${Route53HostedZone}
      Type: CNAME
      TTL: 900
      ResourceRecords:
      - !GetAtt ChefALB.DNSName

# Logging Groups (Cloudwatch Logs)
#########################################################################################
  VarLogMessages:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogSecure:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCron:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCloudInitLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCloudInitOutputLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCfnInitLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCfnInitCmdLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogDmesg:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

# Monitoring
#########################################################################################
  AlertNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !Ref ContactEmail
          Protocol: email

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub CPUAlarmHigh-${AWS::StackName}
      AlarmDescription: Alarms when CPU > 60% for 5 minutes
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Period: 60
      Statistic: Average
      Threshold: 60
      Dimensions:
      - Name: InstanceId
        Value: !Ref SupermarketServer

  DiskSpaceUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub DiskSpaceUtilization-${AWS::StackName}
      AlarmDescription: Alarms when an disk utilization reaches a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: DiskSpaceUtilization
      Namespace: System/Linux
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 300
      Statistic: Average
      Threshold: 80
      Unit: Percent
      Dimensions:
      - Name: InstanceId
        Value: !Ref SupermarketServer

  DiskSpaceUtilizationNvme:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub DiskSpaceUtilizationNvme-${AWS::StackName}
      AlarmDescription: Alarms when an disk utilization reaches a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: DiskSpaceUtilization
      Namespace: System/Linux
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 300
      Statistic: Average
      Threshold: 80
      Unit: Percent
      Dimensions:
      - Name: InstanceId
        Value: !Ref SupermarketServer

  MemoryUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub MemoryUtilization-${AWS::StackName}
      AlarmDescription: Alarms when an memory utilization reaches a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: MemoryUtilization
      Namespace: System/Linux
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 300
      Statistic: Average
      Threshold: 80
      Unit: Percent
      Dimensions:
      - Name: InstanceId
        Value: !Ref SupermarketServer

  ELB5XXExceeded:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub AppELB_5XX_Exceeded-${AWS::StackName}
      AlarmDescription: Alarms when an 5xx requests exceed a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Period: 60
      Statistic: Sum
      Threshold: 10
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ChefALB.LoadBalancerFullName

Outputs: {}
