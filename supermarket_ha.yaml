AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Native Chef Server v4.0.0-alpha1 (not working yet)

Parameters:
  # Required Parameters
  AutomationBucket:
    Default: 'sce-pub'
    Type: String
    Description: AWS S3 bucket name that contains all of the cloudformation templates and scripts for this stack
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
  ChefServerSubnets:
    Description: Provide a list of Subnet IDs for the Chef Servers (must be within the specified VPC)
    Type: List<AWS::EC2::Subnet::Id>
  SSLCertificateARN:
    Default: 'arn:aws:iam::'
    Description: SSL Certficate ARN for SSL Certficate
    Type: String
  InboundAdminSecurityGroupId:
    Description: Select an existing Security Group in your VPC to define administrative ACLs (SSH, monitoring tools, etc) to the Chef servers
    Type: AWS::EC2::SecurityGroup::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  DBPassword:
    Description: Enter DB Password
    NoEcho: true
    Type: String
  AWSAccessKeyId:
    Description: Provide an AWS API key that can read and write to the S3 Bucket
    NoEcho: true
    Type: String
  AWSSecretAccessKey:
    Description: Provide an AWS secret key that can read and write to the S3 Bucket
    NoEcho: true
    Type: String
  ContactEmail:
    Description: Contact email for Cloudwatch notifications and instance tagging
    Type: String
  ContactDept:
    Description: Contact department for billing purposes
    Type: String
  ChefServerUrl:
    Description: The URL of the Chef Server, required for OAuth2.
    Type: String
  ChefOAuth2AppId:
    Description: The Chef OAuth2 App ID - Get this from the /etc/opscode/oc-id-applications/supermarket.json file on your chef server
    Type: String
  ChefOAuth2Secret:
    Description: The Chef OAuth2 App ID - Get this from the /etc/opscode/oc-id-applications/supermarket.json file on your chef server
    Type: String
  ChefOAuth2VerifySSL:
    Description: If the SSL certificate of your chef server is generated by a globally trusted CA, set this to true.
    Type: String
    Default: false
    AllowedValues:
    - 'true'
    - 'false'
  ###############################################################################
  # Performance Settings
  InstanceType:
    Description: EC2 Instance type for Chef Server Frontends (M5 class recommended)
    Default: m5.large
    Type: String
    AllowedValues: [t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, m4.16xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.12xlarge, m5.24xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge]
  MaxFrontendInstances:
    Description: The maximum number of additional frontend instances to launch
    Type: Number
    Default: 3
  MinFrontendInstances:
    Description: The minimum number of frontend instances to launch in addition to the Bootstrap Frontend
    Type: Number
    Default: 1
  LicenseCount:
    Default: '25'
    Description: Enter how many licenses you have purchased
    Type: String
  DBInstanceClass:
    Description: EC2 Instance type for RDS DBs (EBS Optimized instances recommended)
    Default: 'db.m4.large'
    Type: String
    AllowedValues: [db.t2.medium, db.t2.large, db.t2.xlarge, db.t2.2xlarge,
      db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge, db.m4.16xlarge,
      db.r4.large, db.r4.xlarge, db.r4.2xlarge, db.r4.4xlarge, db.r4.8xlarge, db.r4.16xlarge]
  DBAllocatedStorage:
    Description: Storage size allocated for the database
    Default: '100'
    Type: String
  DBIops:
    Description: IOPS allocated to the storage (storage size * 10)
    Default: '1000'
    Type: String
  ###############################################################################
  # Package Versions & Locations
  SupermarketPackage:
    Description: The URL to the chef server EL7 (chef-server-core) package which will be downloaded
    Type: String
    Default: 'https://packages.chef.io/files/stable/supermarket/3.1.63/el/7/supermarket-3.1.63-1.el7.x86_64.rpm'
  BeforeScriptLocation:
    Description: The S3 location of the script which runs before the Main script (optional)
    Type: String
    Default: ''
  AfterScriptLocation:
    Description: The S3 location of the script which runs after the Main script (optional)
    Type: String
    Default: ''
  ###############################################################################
  # Security Settings
  LoadBalancerScheme:
    Description: Network Scheme for the ELB
    Type: String
    Default: internet-facing
    AllowedValues:
    - 'internet-facing'
    - 'internal'
  LoadBalancerSecurityGroupId:
    Description: Supply a security group for your load balancer (leave blank to have it created for you). Using the default security group is recommended.
    Type: String
    Default: ''
  FrontendSecurityGroupId:
    Description: Supply a security group for your chef frontends (leave blank to have it created for you). Using the default security group is recommended.
    Type: String
    Default: ''
  ChefServerAssociatePublicIpAddress:
    Description: Assign public IP addresses to the Chef Servers or not
    Type: String
    Default: true
    AllowedValues:
    - 'true'
    - 'false'
  ChefServerIamRole:
    Description: Supply an IAM Role for the Chef Servers (leave blank to have it created for you). NOTE If you supply your own role, you must also provide an S3 Bucket which that role can access
    Type: String
    Default: ''
  SupermarketBucket:
    Description: Supply an S3 Bucket name for Supermarket to serve cookbook files from (Leave blank to have it created for you)
    Type: String
    Default: ''
  ###############################################################################
  # Other Settings
  Route53HostedZone:
    Type: String
    Default: ''
    Description: Supply a Route 53 Hosted Zone name (eg. mydomain.com.) for auto-creating a DNS record. Must end in a dot. (Leave blank to disable)
  Route53RecordName:
    Type: String
    Default: 'supermarket'
    Description: Supply a DNS record name that will be prepended to the Route 53 Hosted Zone
  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain cloudwatch log events.
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required Parameters"
        Parameters:
          - VPC
          - ChefServerSubnets
          - SSLCertificateARN
          - InboundAdminSecurityGroupId
          - KeyName
          - DBPassword
          - ContactEmail
          - ContactDept
      - Label:
          default: "Performance Settings"
        Parameters:
          - InstanceType
          - MaxFrontendInstances
          - MinFrontendInstances
          - LicenseCount
          - DBInstanceClass
          - DBAllocatedStorage
          - DBIops
          - ElasticSearchInstanceType
          - ElasticSearchVersion
          - ElasticSearchShardCount
          - ElasticSearchReplicaCount
      - Label:
          default: "Package Versions & Locations"
        Parameters:
          - ChefServerPackage
          - ChefManagePackage
          - PushJobsPackage
          - BeforeScriptLocation
          - AfterScriptLocation
      - Label:
          default: "Security Settings"
        Parameters:
          - LoadBalancerScheme
          - LoadBalancerSecurityGroupId
          - FrontendSecurityGroupId
          - ChefServerAssociatePublicIpAddress
          - DisableSignup
          - ChefServerIamRole
          - SupermarketBucket

Conditions:
  CreateChefServerIamRole:
    !Equals [ !Ref ChefServerIamRole, '' ]
  CreateSupermarketBucket:
    !Equals [ !Ref SupermarketBucket, '' ]
  CreateLoadBalancerSecurityGroup:
    !Equals [ !Ref LoadBalancerSecurityGroupId, '' ]
  CreateFrontendSecurityGroup:
    !Equals [ !Ref FrontendSecurityGroupId, '' ]
  CreateRoute53Record:
    !Not [!Equals [ !Ref Route53HostedZone, '' ] ]

# NOTE: If you wish to replace this AMI with your own RHEL-ish variety, be prepared to
# - have the `aws` & `cfn-init` tools preinstalled
# - Install and enable NTP or chronyd
# - Support systemd as the init system, or else rewrite the below aws-signing-proxy service defitinion into systemd
Mappings:
  AWSRegion2AMI:
    ap-south-1:
      AMI: ami-7d95b612
    eu-west-3:
      AMI: ami-a88233d5
    eu-west-2:
      AMI: ami-924aa8f5
    eu-west-1:
      AMI: ami-921423eb
    ap-northeast-2:
      AMI: ami-d117bebf
    ap-northeast-1:
      AMI: ami-2724cf58
    sa-east-1:
      AMI: ami-4fd48923
    ca-central-1:
      AMI: ami-c59818a1
    ap-southeast-1:
      AMI: ami-a7f0c4db
    ap-southeast-2:
      AMI: ami-c267b0a0
    eu-central-1:
      AMI: ami-43eec3a8
    us-east-1:
      AMI: ami-afd15ed0
    us-east-2:
      AMI: ami-2a0f324f
    us-west-1:
      AMI: ami-00d8c660
    us-west-2:
      AMI: ami-31394949

Resources:
  FrontendAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PostgreSQLStack
    Properties:
      LaunchConfigurationName: !Ref ServerLaunchConfig
      TargetGroupARNs:
      - !Ref ChefTargetGroup
      MaxSize: !Sub '${MaxFrontendInstances}'
      MinSize: !Sub '${MinFrontendInstances}'
      NotificationConfigurations:
      - TopicARN: !Ref AlertNotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-frontend
        PropagateAtLaunch: true
      - Key: X-Dept
        Value: !Ref ContactDept
        PropagateAtLaunch: true
      - Key: X-Contact
        Value: !Ref ContactEmail
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref ChefServerSubnets

  FrontendAutoScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref FrontendAutoScaleGroup
      Cooldown: 60
      ScalingAdjustment: 1

  FrontendAutoScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref FrontendAutoScaleGroup
      Cooldown: 60
      ScalingAdjustment: -1

  StackSupermarketBucket:
    Condition: CreateSupermarketBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  ChefInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !If [CreateChefServerIamRole, !Ref ChefRole, !Ref ChefServerIamRole]

  ChefRole:
    Condition: CreateChefServerIamRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /

  RolePolicies:
    Condition: CreateChefServerIamRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-ChefServer-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        # Allow all actions to one bucket (the supplied one, or the one you provided)
        - Action: s3:*
          Effect: Allow
          Resource:
            - !Join ['', [ 'arn:aws:s3:::', !If [CreateSupermarketBucket, !Ref StackSupermarketBucket, !Ref SupermarketBucket] ]]
            - !Join ['', [ 'arn:aws:s3:::', !If [CreateSupermarketBucket, !Ref StackSupermarketBucket, !Ref SupermarketBucket], '/*' ]]
        # Allow ability to list all buckets
        - Action: s3:List*
          Effect: Allow
          Resource: arn:aws:s3:::*
        # Allow instances to set themselves as unhealthy if one of the scripts fail
        - Action: autoscaling:*
          Effect: Allow
          Resource: "*"
        # Allow instances to read their own tags (needed for setup script below)
        - Action: ec2:DescribeTags
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:GetMetricStatistics
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:ListMetrics
          Effect: Allow
          Resource: "*"
        # Allow instances to write to cloudwatch logs
        - Action: ["logs:PutLogEvents", "logs:CreateLogStream", "logs:CreateLogGroup"]
          Effect: Allow
          Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*
      Roles:
      - !Ref ChefRole

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateFrontendSecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: '80'
      - FromPort: '443'
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: '443'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-FE-SG
      VpcId: !Ref VPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateLoadBalancerSecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend Load Balancer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ELB-SG
      VpcId: !Ref VPC

  ChefALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub ${AWS::StackName}-lb
      SecurityGroups:
        - !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
      Subnets: !Ref ChefServerSubnets
      # IpAddressType: dualstack
      Scheme: !Ref LoadBalancerScheme
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb
        - Key: X-Dept
          Value: !Ref ContactDept
        - Key: X-Contact
          Value: !Ref ContactEmail

  ChefALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        Certificates:
          - CertificateArn: !Ref SSLCertificateARN
        LoadBalancerArn: !Ref ChefALB
        Port: 443
        Protocol: HTTPS
        DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ChefTargetGroup

  ChefTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        HealthCheckIntervalSeconds: 60
        UnhealthyThresholdCount: 10
        HealthCheckPath: /_status
        VpcId: !Ref VPC
        Port: 443
        Protocol: HTTPS
        TargetGroupAttributes:
          - Key: stickiness.enabled
            Value: true
          - Key: stickiness.type
            Value: lb_cookie
        Tags:
          - Key: X-Dept
            Value: !Ref ContactDept
          - Key: X-Contact
            Value: !Ref ContactEmail

  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !Ref ChefServerAssociatePublicIpAddress
      EbsOptimized: true
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 20
          VolumeType: gp2
          DeleteOnTermination: true
      IamInstanceProfile: !Ref ChefInstanceProfile
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref AWS::Region
        - AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !If [CreateFrontendSecurityGroup, !Ref FrontendSecurityGroup, !Ref FrontendSecurityGroupId]
      - !Ref InboundAdminSecurityGroupId
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -x
          function error_exit {
            # Uncomment this next line before going to production
            # aws autoscaling set-instance-health --health-status Unhealthy --region ${AWS::Region} --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            exit 1
          }
          # Update the system first
          yum upgrade -y
          # Execute AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServerLaunchConfig --region ${AWS::Region} || error_exit
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: [awslogs, supermarket_setup]
        supermarket_setup:
          packages:
            rpm:
              supermarket: !Sub ${SupermarketPackage}
            yum:
              perl: []
              perl-Switch: []
              perl-DateTime: []
              perl-Sys-Syslog: []
              perl-LWP-Protocol-https: []
              perl-Digest-SHA: []
              zip: []
              unzip: []
          files:
            /etc/supermarket/supermarket.json:
              content: !Sub
              - |
                {
                  "fqdn": "${FQDN}",
                  "chef_server_url": "${ChefServerUrl}",
                  "chef_oauth2_app_id": "${ChefOAuth2AppId}",
                  "chef_oauth2_secret": "${ChefOAuth2Secret}",
                  "chef_oauth2_verify_ssl": ${ChefOAuth2VerifySSL},
                  "features": "tools, gravatar, collaborator_groups",
                  "s3_bucket": "${S3BUCKET}",
                  "s3_access_key_id": "${AWSAccessKeyId}",
                  "s3_secret_access_key": "${AWSSecretAccessKey}",
                  "database": {
                    "enable": false,
                    "user": "chefadmin",
                    "password": "${DBPassword}",
                    "port": "5432",
                    "pool": "25",
                    "name": "supermarket",
                    "host": "${PostgreSQLStack.Outputs.EndpointAddress}"
                  }
                }
              - { S3BUCKET: !If [CreateSupermarketBucket, !Ref StackSupermarketBucket, !Ref SupermarketBucket] }
              - { FQDN: !If [CreateRoute53Record, !Ref SupermarketDNSRecord, !GetAtt ChefALB.DNSName] }
          commands:
            02_before_script:
              command: !Sub |
                # this won't work, because these are temporary keys that rotate, but it was fun to figure out
                # we actually need to make Supermarket's doorkeeper gem do this
                # python -c "import boto3,sys,json; creds = boto3.Session().get_credentials(); data=json.loads(sys.stdin.read()); data['s3_access_key_id'] = creds._access_key; data['s3_secret_access_key'] = creds._secret_key; print json.dumps(data, indent=2)" < /etc/supermarket/supermarket.nokeys.json > /etc/supermarket/supermarket.json
            03_configure_supermarket:
              command: !Sub |
                supermarket-ctl reconfigure
            04_after_script:
              command: !Sub |
                true
            05_configure_cloudwatch_monitoring:
              command: !Sub |
                mkdir /opt/cloudwatch_monitoring
                cd /opt/cloudwatch_monitoring
                curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O
                unzip CloudWatchMonitoringScripts-1.2.1.zip
                rm CloudWatchMonitoringScripts-1.2.1.zip
                crontab -l | { cat; echo "*/5 * * * * /opt/cloudwatch_monitoring/aws-scripts-mon/mon-put-instance-data.pl --auto-scaling --mem-util --disk-space-util --disk-path=/ --from-cron"; } | crontab -
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}
                log_group_name = ${VarLogMessages}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}
                log_group_name = ${VarLogSecure}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCron}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCloudInitLog}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCfnInitLog}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCfnInitCmdLog}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}
                log_group_name = ${VarLogCloudInitOutputLog}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}
                log_group_name = ${VarLogDmesg}
              mode: '000644'
              owner: root
              group: root
          commands:
            01_systemd:
              command: systemctl daemon-reload && systemctl start awslogsd.service

# PostgreSQL DB
#########################################################################################
  PostgreSQLStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AutomationBucket}/chef_rds.yaml
      Parameters:
        VPC: !Sub ${VPC}
        ChefServerSubnets: !Join [ ",", !Ref ChefServerSubnets ]
        DBPassword: !Ref DBPassword
        ContactEmail: !Ref ContactEmail
        ContactDept: !Ref ContactDept
        DBInstanceClass: !Ref DBInstanceClass
        DBAllocatedStorage: !Ref DBAllocatedStorage
        DBIops: !Ref DBIops
        FrontendSecurityGroupId: !If [CreateFrontendSecurityGroup, !Ref FrontendSecurityGroup, !Ref FrontendSecurityGroupId]
        AlertNotificationTopic: !Ref AlertNotificationTopic

# Route 53 Record
#########################################################################################
  ChefLBDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      HostedZoneName: !Ref Route53HostedZone
      Comment: !Sub Created by Cloudformation ${AWS::StackName}
      Name: !Sub ${Route53RecordName}.${Route53HostedZone}
      Type: CNAME
      TTL: 900
      ResourceRecords:
      - !GetAtt ChefALB.DNSName

# Logging Groups (Cloudwatch Logs)
#########################################################################################
  VarLogMessages:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogSecure:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCron:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCloudInitLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCloudInitOutputLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCfnInitLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogCfnInitCmdLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VarLogDmesg:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

# Monitoring
#########################################################################################
  AlertNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !Ref ContactEmail
          Protocol: email

  DiskSpaceUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub DiskSpaceUtilization-${AWS::StackName}
      AlarmDescription: Alarms when an disk utilization reaches a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: DiskSpaceUtilization
      Namespace: System/Linux
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 300
      Statistic: Average
      Threshold: 80
      Unit: Percent
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScaleGroup
        - Name: MountPath
          Value: '/'
        - Name: Filesystem
          Value: /dev/xvda1

  DiskSpaceUtilizationNvme:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub DiskSpaceUtilizationNvme-${AWS::StackName}
      AlarmDescription: Alarms when an disk utilization reaches a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: DiskSpaceUtilization
      Namespace: System/Linux
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 300
      Statistic: Average
      Threshold: 80
      Unit: Percent
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScaleGroup
        - Name: MountPath
          Value: '/'
        - Name: Filesystem
          Value: /dev/nvme0n1p1

  MemoryUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub MemoryUtilization-${AWS::StackName}
      AlarmDescription: Alarms when an memory utilization reaches a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: MemoryUtilization
      Namespace: System/Linux
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 300
      Statistic: Average
      Threshold: 80
      Unit: Percent
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScaleGroup

  ELB5XXExceeded:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub AppELB_5XX_Exceeded-${AWS::StackName}
      AlarmDescription: Alarms when an 5xx requests exceed a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Period: 60
      Statistic: Sum
      Threshold: 10
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ChefALB.LoadBalancerFullName

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub CPUAlarmHigh-${AWS::StackName}
      AlarmDescription: Scale up when CPU > 60% for 5 minutes
      AlarmActions: [!Ref FrontendAutoScaleUpPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Period: 60
      Statistic: Average
      Threshold: 60
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScaleGroup

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub CPUAlarmLow-${AWS::StackName}
      AlarmDescription: Scale down when CPU < 40% for 10 minutes
      AlarmActions: [!Ref FrontendAutoScaleDownPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 10
      Period: 60
      Statistic: Average
      Threshold: 40
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScaleGroup

  # OpsDashboard:
  #   Type: AWS::CloudWatch::Dashboard
  #   Properties:
  #     DashboardName: !Sub ${AWS::StackName}-OpsDashboard
  #     DashboardBody: !Sub |
  #       {
  #           "widgets": [
  #               {
  #                   "type": "metric",
  #                   "x": 12,
  #                   "y": 6,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "System/Linux", "DiskSpaceUtilization", "MountPath", "/", "AutoScalingGroupName", "${BootstrapAutoScaleGroup}", "Filesystem", "/dev/xvda1", { "period": 60 } ],
  #                           [ "...", "${FrontendAutoScaleGroup}", ".", ".", { "period": 60 } ],
  #                           [ "System/Linux", "DiskSpaceUtilization", "MountPath", "/", "AutoScalingGroupName", "${BootstrapAutoScaleGroup}", "Filesystem", "/dev/nvme0n1p1", { "period": 60 } ],
  #                           [ "...", "${FrontendAutoScaleGroup}", ".", ".", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "yAxis": {
  #                           "left": {
  #                               "min": 0,
  #                               "max": 100
  #                           }
  #                       },
  #                       "title": "Frontend disk space util %"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 6,
  #                   "y": 6,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "System/Linux", "MemoryUtilization", "AutoScalingGroupName", "${BootstrapAutoScaleGroup}", { "period": 60 } ],
  #                           [ "...", "${FrontendAutoScaleGroup}", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "Frontend Memory Util %",
  #                       "yAxis": {
  #                           "left": {
  #                               "min": 0,
  #                               "max": 100
  #                           }
  #                       }
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 0,
  #                   "y": 18,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/ES", "CPUUtilization", "DomainName", "${ElasticsearchStack.Outputs.ElasticsearchDomain}", "ClientId", "${AWS::AccountId}", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "ElasticSearch CPU Util %",
  #                       "yAxis": {
  #                           "left": {
  #                               "min": 0,
  #                               "max": 100
  #                           }
  #                       }
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 6,
  #                   "y": 18,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/ES", "JVMMemoryPressure", "DomainName", "${ElasticsearchStack.Outputs.ElasticsearchDomain}", "ClientId", "${AWS::AccountId}", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "ElasticSearch JVM Memory Pressure",
  #                       "yAxis": {
  #                           "left": {
  #                               "min": 0,
  #                               "max": 100
  #                           }
  #                       }
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 12,
  #                   "y": 18,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": true,
  #                       "metrics": [
  #                           [ "AWS/ES", "ClusterUsedSpace", "DomainName", "${ElasticsearchStack.Outputs.ElasticsearchDomain}", "ClientId", "${AWS::AccountId}", { "period": 60, "color": "#d62728" } ],
  #                           [ ".", "FreeStorageSpace", ".", ".", ".", ".", { "period": 60, "color": "#1f77b4" } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "ElasticSearch Storage Space Used/Free"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 18,
  #                   "y": 18,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/ES", "ClusterStatus.yellow", "DomainName", "${ElasticsearchStack.Outputs.ElasticsearchDomain}", "ClientId", "${AWS::AccountId}", { "color": "#bcbd22" } ],
  #                           [ ".", "ClusterStatus.green", ".", ".", ".", ".", { "color": "#2ca02c" } ],
  #                           [ ".", "ClusterStatus.red", ".", ".", ".", ".", { "color": "#d62728" } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "ElasticSearch Cluster Status",
  #                       "period": 300
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 0,
  #                   "y": 6,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${FrontendAutoScaleGroup}", { "period": 60 } ],
  #                           [ "...", "${BootstrapAutoScaleGroup}", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "yAxis": {
  #                           "left": {
  #                               "min": 0,
  #                               "max": 100
  #                           }
  #                       },
  #                       "title": "Frontend CPU Util %"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 0,
  #                   "y": 12,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${PostgreSQLStack.Outputs.DBPostgres}", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "RDS CPU Util %",
  #                       "period": 300,
  #                       "yAxis": {
  #                           "left": {
  #                               "min": 0,
  #                               "max": 100
  #                           }
  #                       }
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 18,
  #                   "y": 12,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/RDS", "ReadLatency", "DBInstanceIdentifier", "${PostgreSQLStack.Outputs.DBPostgres}", { "period": 60 } ],
  #                           [ ".", "WriteLatency", ".", ".", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "RDS read/write latency"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 6,
  #                   "y": 12,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/RDS", "ReadIOPS", "DBInstanceIdentifier", "${PostgreSQLStack.Outputs.DBPostgres}", { "period": 60 } ],
  #                           [ ".", "WriteIOPS", ".", ".", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "RDS read/write IOPs"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 12,
  #                   "y": 12,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/RDS", "FreeStorageSpace", "DBInstanceIdentifier", "${PostgreSQLStack.Outputs.DBPostgres}", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "RDS free storage space"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 18,
  #                   "y": 6,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": true,
  #                       "metrics": [
  #                           [ "AWS/ApplicationELB", "UnHealthyHostCount", "TargetGroup", "${ChefTargetGroup.TargetGroupFullName}", "LoadBalancer", "${ChefALB.LoadBalancerFullName}", { "period": 60, "color": "#d62728" } ],
  #                           [ ".", "HealthyHostCount", ".", ".", ".", ".", { "period": 60, "color": "#1f77b4" } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "Frontends Health"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 0,
  #                   "y": 0,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": true,
  #                       "metrics": [
  #                           [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ChefALB.LoadBalancerFullName}", { "period": 60, "stat": "Sum" } ],
  #                           [ ".", "HTTPCode_ELB_4XX_Count", ".", ".", { "period": 60, "stat": "Sum" } ],
  #                           [ ".", "HTTPCode_ELB_5XX_Count", ".", ".", { "period": 60, "color": "#d62728", "stat": "Sum" } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "LB HTTP Requests per Minute by Type",
  #                       "period": 300
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 6,
  #                   "y": 0,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/ApplicationELB", "ActiveConnectionCount", "LoadBalancer", "${ChefALB.LoadBalancerFullName}", { "period": 60 } ],
  #                           [ ".", "NewConnectionCount", ".", ".", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "LB Connection Counts"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 12,
  #                   "y": 0,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${ChefALB.LoadBalancerFullName}", { "period": 60, "stat": "p99" } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "Frontend Response Time (ms)"
  #                   }
  #               },
  #               {
  #                   "type": "metric",
  #                   "x": 18,
  #                   "y": 0,
  #                   "width": 6,
  #                   "height": 6,
  #                   "properties": {
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "metrics": [
  #                           [ "AWS/ApplicationELB", "ConsumedLCUs", "LoadBalancer", "${ChefALB.LoadBalancerFullName}", { "period": 60 } ]
  #                       ],
  #                       "region": "${AWS::Region}",
  #                       "title": "ALB Consumed LCUs"
  #                   }
  #               }
  #           ]
  #         }

Outputs: {}
